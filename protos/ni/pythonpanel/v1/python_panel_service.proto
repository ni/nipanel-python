syntax = "proto3";

package ni.pythonpanel.v1;

import "google/protobuf/any.proto";

option cc_enable_arenas = true;
option csharp_namespace = "NationalInstruments.PythonPanel.V1";
option go_package = "pythonpanelv1";
option java_multiple_files = true;
option java_outer_classname = "PythonPanelServiceProto";
option java_package = "com.ni.pythonpanel.v1";
option objc_class_prefix = "NIPP";
option php_namespace = "NI\\PythonPanel\\V1";
option ruby_package = "NI::PythonPanel::V1";

// Service interface for interacting with python panels
service PythonPanelService {
  // Start a panel using the provided configuration (or connect to if it has already been started)
  // Status Codes for errors:
  // - INVALID_ARGUMENT: 
  //   - The panel identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  //   - The panel configuration has an invalid argument.
  // - NOT_FOUND: 
  //   - The panel configuration includes a file that was not found.
  rpc StartPanel(StartPanelRequest) returns (StartPanelResponse);

  // Stop a panel
  // Status Codes for errors:
  // - INVALID_ARGUMENT:
  //   - The panel identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  rpc StopPanel(StopPanelRequest) returns (StopPanelResponse);

  // Enumerate the panels available in the system, including information about the state of the panels and what values they have.
  // Status Codes for errors:
  rpc EnumeratePanels(EnumeratePanelsRequest) returns (EnumeratePanelsResponse);

  // Get a value for a control on the panel
  // Status Codes for errors:
  // - INVALID_ARGUMENT: 
  //   - The panel identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  //   - The value identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  // - NOT_FOUND: 
  //   - The value with the specified identifier was not found.
  rpc GetValue(GetValueRequest) returns (GetValueResponse);

  // Try to get a value for a control on the panel
  // Status Codes for errors:
  // - INVALID_ARGUMENT: 
  //   - The panel identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  //   - The value identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  rpc TryGetValue(TryGetValueRequest) returns (TryGetValueResponse);

  // Set a value for a control on the panel
  // Status Codes for errors:
  // - INVALID_ARGUMENT: 
  //   - The panel identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  //   - The value identifier contains invalid characters. Only alphanumeric characters and underscores are allowed.
  rpc SetValue(SetValueRequest) returns (SetValueResponse);
}

message StreamlitPanelConfiguration 
{
  // Absolute path of the streamlit script file on disk, or network path to the file. This must end in ".py".
  string panel_script_path = 1;

  // Path to the python interpreter to use for running the streamlit script.
  string python_path = 2;
}

message StartPanelRequest {
  // Unique ID of the panel
  string panel_id = 1;

  // Configuration for the panel
  oneof panel_configuration {
    StreamlitPanelConfiguration streamlit_panel_configuration = 2;
  }
}

message StartPanelResponse {
  // Location of the panel 
  string panel_uri = 1; 
}

message StopPanelRequest {
  // Unique ID of the panel
  string panel_id = 1;

  // Reset all storage associated with panel
  bool reset = 2;
}

message StopPanelResponse {
}

message EnumeratePanelsRequest {
}

message PanelInformation {
  // Unique ID of the panel
  string panel_id = 1;

  // Location of the panel
  string panel_uri = 2;

  // IDs of all of the values associated with the panel
  repeated string value_ids = 3;
}

message EnumeratePanelsResponse {
  // The list of panels available in the system
  repeated PanelInformation panels = 1;
}

message GetValueRequest {
  // Unique ID of the panel
  string panel_id = 1;

  // Unique ID of value
  string value_id = 2;
}

message GetValueResponse {
  // The value
  google.protobuf.Any value = 1;
}

message TryGetValueRequest {
  // Unique ID of the panel
  string panel_id = 1;

  // Unique ID of value
  string value_id = 2;
}

message TryGetValueResponse {
  // The value, if  it was found
  optional google.protobuf.Any value = 1;
}

message SetValueRequest {
  // Unique ID of the panel
  string panel_id = 1;

  // Unique ID of the value
  string value_id = 2;

  // The value
  google.protobuf.Any value = 3;

  // Notify other clients of this new value
  bool notify = 4;
}

message SetValueResponse {
}